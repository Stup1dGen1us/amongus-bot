import telebot
from telebot import types
import random
import math
import threading
import time
import os

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
BOT_TOKEN = os.getenv('BOT_TOKEN', '8476730469:AAEcYyXei67710RA44tZJunKPC8z60veN7Y')
bot = telebot.TeleBot(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–º –∏–≥—Ä—ã –ø–æ –∫–æ–¥—É –∫–æ–º–Ω–∞—Ç—ã
games = {}
# –•—Ä–∞–Ω–∏–º –∫—Ç–æ –≤ –∫–∞–∫–æ–π –∫–æ–º–Ω–∞—Ç–µ: user_id -> room_code
user_rooms = {}

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
tasks = ["–ù–ê–ô–¢–ò –ö–†–ê–°–ù–´–ô –¶–í–ï–¢", "–°–§–û–¢–û–ì–†–ê–§–ò–†–û–í–ê–¢–¨ –î–ï–†–ï–í–û", "–í–í–ï–°–¢–ò –ö–û–î 1234", "–î–û–¢–†–û–ù–£–¢–¨–°–Ø –î–û –°–¢–ï–ù–´"]

# –§–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
auto_location_enabled = True
# –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
LOCATION_UPDATE_INTERVAL = 30

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True),
        types.KeyboardButton("üë• –ö—Ç–æ –≤ –∏–≥—Ä–µ"),
        types.KeyboardButton("üéÆ –ú–æ—è —Ä–æ–ª—å"),
        types.KeyboardButton("‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"),
        types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    ]
    markup.add(*buttons)
    return markup

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
def create_settings_keyboard():
    markup = types.InlineKeyboardMarkup()
    auto_text = "üìç –ê–≤—Ç–æ-–ª–æ–∫–∞—Ü–∏—è: –í–ö–õ" if auto_location_enabled else "üìç –ê–≤—Ç–æ-–ª–æ–∫–∞—Ü–∏—è: –í–´–ö–õ"
    markup.add(
        types.InlineKeyboardButton(auto_text, callback_data="toggle_auto_location"),
        types.InlineKeyboardButton("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 30—Å–µ–∫", callback_data="change_interval")
    )
    return markup

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad = math.radians(lat1)
    lon1_rad = math.radians(lon1)
    lat2_rad = math.radians(lat2)
    lon2_rad = math.radians(lon2)
    
    dlat = lat2_rad - lat1_rad
    dlon = lon2_rad - lon1_rad
    
    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    
    distance = R * c
    return distance

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ ‚Äî –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π
def auto_location_updater():
    while True:
        try:
            if auto_location_enabled:
                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –≤–æ –≤—Å–µ—Ö –∏–≥—Ä–∞—Ö
                for user_id, room_code in list(user_rooms.items()):
                    if room_code not in games or games[room_code]['state'] != 'playing':
                        continue

                    game = games[room_code]
                    username = None
                    for uname, data in game['players'].items():
                        if data.get('user_id') == user_id:  # –ò—â–µ–º username –ø–æ user_id
                            username = uname
                            break

                    if not username:
                        continue

                    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ ‚Äî –ø—Ä–µ–¥–∞—Ç–µ–ª—å
                    if game['players'][username]['role'] == 'impostor' and game['players'][username]['alive']:
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—é –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
                            bot.send_message(
                                user_id,
                                "üî™ –¢—ã ‚Äî –ø—Ä–µ–¥–∞—Ç–µ–ª—å! üìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∂–µ—Ä—Ç–≤—É.\n"
                                "(–¢—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é ‚Äî –∏–ª–∏ –∂–¥–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)",
                                reply_markup=create_main_keyboard()
                            )
                            print(f"üîî –ê–≤—Ç–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—é @{username} –≤ –∫–æ–º–Ω–∞—Ç–µ {room_code}")
                        except Exception as e:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—é {user_id}: {e}")
                            # –ï—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚Äî —É–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
                            if user_id in user_rooms:
                                del user_rooms[user_id]

            time.sleep(LOCATION_UPDATE_INTERVAL)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏: {e}")
            time.sleep(60)

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
location_thread = threading.Thread(target=auto_location_updater, daemon=True)
location_thread.start()

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    markup = create_main_keyboard()
    bot.reply_to(message, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Real Among Us!\n\n"
                          "üéØ –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É: /create\n"
                          "üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è: /join_1234\n"
                          "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤: /list\n"
                          "üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É: /startgame\n"
                          "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –∫–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'\n\n"
                          "üìç –õ–æ–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫!",
                 reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.message_handler(func=lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def handle_settings(message):
    markup = create_settings_keyboard()
    bot.reply_to(message, "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:\n\n"
                         "üìç –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ - –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n"
                         "üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞ - 5 –º–µ—Ç—Ä–æ–≤\n"
                         "üéØ –ó–∞–¥–∞–Ω–∏—è - 4 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞",
                 reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@bot.callback_query_handler(func=lambda call: call.data.startswith(('toggle_auto_location', 'change_interval')))
def handle_settings_callback(call):
    global auto_location_enabled
    
    if call.data == 'toggle_auto_location':
        auto_location_enabled = not auto_location_enabled
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if auto_location_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        bot.answer_callback_query(call.id, f"üìç –ê–≤—Ç–æ-–ª–æ–∫–∞—Ü–∏—è {status}")
        
        try:
            bot.edit_message_reply_markup(
                call.message.chat.id, 
                call.message.message_id, 
                reply_markup=create_settings_keyboard()
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
    
    elif call.data == 'change_interval':
        bot.answer_callback_query(call.id, "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
@bot.message_handler(commands=['create'])
def create_game(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not username:
            bot.reply_to(message, "‚ùå –°–æ–∑–¥–∞–π —Å–µ–±–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!")
            return

        room_code = str(random.randint(1000, 9999))
        
        games[room_code] = {
            'creator': user_id,
            'players': {},  # username -> {user_id, role, alive, location}
            'state': 'lobby',
            'tasks': tasks.copy()
        }
        
        user_rooms[user_id] = room_code
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ –∏–≥—Ä–æ–∫–∞
        games[room_code]['players'][username] = {
            'user_id': user_id,
            'role': None,
            'alive': True,
            'location': None
        }
        
        markup = types.InlineKeyboardMarkup()
        share_btn = types.InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º", url=f"https://t.me/share/url?url=/join_{room_code}")
        markup.add(share_btn)
        
        bot.reply_to(message, f"üéÆ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!\nüî¢ –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: {room_code}\n\n"
                             f"–î–∞–π —ç—Ç–æ—Ç –∫–æ–¥ –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å:\n"
                             f"–û–Ω–∏ –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å: /join_{room_code}\n\n"
                             f"–ö–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è, –Ω–∞–ø–∏—à–∏ /startgame",
                     reply_markup=markup)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã: {e}")

# –ü–æ–º–æ—â—å –ø–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é
@bot.message_handler(commands=['join'])
def join_help(message):
    markup = types.InlineKeyboardMarkup()
    example_btn = types.InlineKeyboardButton("üéØ –ü—Ä–∏–º–µ—Ä", callback_data="join_example")
    markup.add(example_btn)
    
    bot.reply_to(message, "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏:\n/join_1234\n\n"
                         "–ì–¥–µ 1234 - –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –¥–∞–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã",
                 reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: call.data in ["join_example", "show_players", "refresh_players", "start_game"])
def handle_callback(call):
    if call.data == "join_example":
        bot.answer_callback_query(call.id, "–ù–∞–ø—Ä–∏–º–µ—Ä: /join_5678")
    elif call.data == "show_players" or call.data == "refresh_players":
        show_players(call.message)
    elif call.data == "start_game":
        start_game(call.message)

# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
@bot.message_handler(regexp=r'^/join_(\d{4})$')
def join_game(message):
    try:
        room_code = message.text.split('_')[1]
        user_id = message.from_user.id
        username = message.from_user.username
        
        if not username:
            bot.reply_to(message, "‚ùå –°–æ–∑–¥–∞–π —Å–µ–±–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!")
            return
            
        if room_code not in games:
            bot.reply_to(message, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥.")
            return
            
        game = games[room_code]
        
        if username in game['players']:
            bot.reply_to(message, "‚úÖ –¢—ã —É–∂–µ –≤ –∏–≥—Ä–µ!")
            return
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
        game['players'][username] = {
            'user_id': user_id,
            'role': None,
            'alive': True,
            'location': None
        }
        user_rooms[user_id] = room_code
        
        markup = create_main_keyboard()
        bot.reply_to(message, f"üéâ –¢—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ {room_code}!\n\n"
                             f"üìç –õ–æ–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è\n"
                             f"–û–∂–∏–¥–∞–π –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –æ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è...",
                     reply_markup=markup)
        
        # –°–æ–æ–±—â–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é
        creator_id = game['creator']
        try:
            markup = types.InlineKeyboardMarkup()
            start_btn = types.InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data="start_game")
            players_btn = types.InlineKeyboardButton("üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–≥—Ä–æ–∫–æ–≤", callback_data="show_players")
            markup.add(start_btn, players_btn)
            
            bot.send_message(creator_id, f"üéâ @{username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç–≤–æ–µ–π –∏–≥—Ä–µ!",
                           reply_markup=markup)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è: {e}")
            
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∏–≥—Ä–µ: {e}")

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
def show_players(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_rooms:
            bot.send_message(message.chat.id, "‚ùå –¢—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ! –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å.")
            return
            
        room_code = user_rooms[user_id]
        
        if room_code not in games:
            bot.send_message(message.chat.id, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        game = games[room_code]
        
        player_list = "üë• –ò–≥—Ä–æ–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ:\n"
        for i, (player, data) in enumerate(game['players'].items(), 1):
            status = "‚úÖ" if data['alive'] else "üíÄ"
            role_icon = "üî™" if data['role'] == 'impostor' else "üë®‚ÄçüöÄ"
            role_text = " (–ü—Ä–µ–¥–∞—Ç–µ–ª—å)" if data['role'] == 'impostor' else " (–ú–∏—Ä–Ω—ã–π)"
            player_list += f"{i}. {status} {role_icon} @{player}{role_text if data['role'] else ''}\n"
        
        player_list += f"\n–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(game['players'])}"
        
        markup = types.InlineKeyboardMarkup()
        refresh_btn = types.InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_players")
        markup.add(refresh_btn)

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback
        if hasattr(message, 'message_id') and hasattr(message, 'chat'):
            try:
                bot.edit_message_text(
                    player_list,
                    message.chat.id,
                    message.message_id,
                    reply_markup=markup
                )
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 400 and "message can't be edited" in str(e):
                    # –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    bot.send_message(message.chat.id, player_list, reply_markup=markup)
                else:
                    print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –∫–Ω–æ–ø–∫–µ "–ö—Ç–æ –≤ –∏–≥—Ä–µ")
            bot.send_message(message.chat.id, player_list, reply_markup=markup)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏–≥—Ä–æ–∫–æ–≤: {e}")

# –ö–Ω–æ–ø–∫–∞ "–ö—Ç–æ –≤ –∏–≥—Ä–µ"
@bot.message_handler(func=lambda message: message.text == "üë• –ö—Ç–æ –≤ –∏–≥—Ä–µ")
def handle_players_button(message):
    show_players(message)

# –ö–Ω–æ–ø–∫–∞ "–ú–æ—è —Ä–æ–ª—å"
@bot.message_handler(func=lambda message: message.text == "üéÆ –ú–æ—è —Ä–æ–ª—å")
def handle_role_button(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        
        if user_id not in user_rooms:
            bot.reply_to(message, "‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
            return
            
        room_code = user_rooms[user_id]
        
        if room_code not in games:
            bot.reply_to(message, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        game = games[room_code]
        
        if username not in game['players']:
            bot.reply_to(message, "‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
            return
            
        role_data = game['players'][username]
        
        if role_data['role'] is None:
            bot.reply_to(message, "üé≠ –ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –û–∂–∏–¥–∞–π...")
        elif role_data['role'] == 'impostor':
            bot.reply_to(message, "üî™ –¢—ã –ü–†–ï–î–ê–¢–ï–õ–¨!\n\n"
                                 "–¢–≤–æ—è —Ü–µ–ª—å - —É–±–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π!\n"
                                 "–ü–æ–¥—Ö–æ–¥–∏ –±–ª–∏–∑–∫–æ –∫ –∂–µ—Ä—Ç–≤–∞–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –ª–æ–∫–∞—Ü–∏—é –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞.")
        else:
            bot.reply_to(message, "üë®‚ÄçüöÄ –¢—ã –ú–ò–†–ù–´–ô –ñ–ò–¢–ï–õ–¨!\n\n"
                                 "–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –∏—â–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—è!\n"
                                 "–û—Ç–ø—Ä–∞–≤–ª—è–π –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")

# –ö–Ω–æ–ø–∫–∞ "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã"
@bot.message_handler(func=lambda message: message.text == "‚ùå –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")
def handle_leave_button(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        
        if user_id in user_rooms:
            room_code = user_rooms[user_id]
            
            if room_code in games and username in games[room_code]['players']:
                del games[room_code]['players'][username]
                
            del user_rooms[user_id]
            
            bot.reply_to(message, "üëã –¢—ã –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã! –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Å—å —Å–Ω–æ–≤–∞.")
        else:
            bot.reply_to(message, "‚ùå –¢—ã –Ω–µ –≤ –∏–≥—Ä–µ!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
@bot.message_handler(commands=['list'])
def list_players(message):
    show_players(message)

# –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
@bot.message_handler(commands=['startgame'])
def start_game(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_rooms:
            bot.reply_to(message, "‚ùå –¢—ã –Ω–µ –≤ –∫–æ–º–Ω–∞—Ç–µ!")
            return
            
        room_code = user_rooms[user_id]
        
        if room_code not in games:
            bot.reply_to(message, "‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
            
        game = games[room_code]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –¥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—å
        if game['creator'] != user_id:
            bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã –º–æ–∂–µ—Ç –µ—ë –Ω–∞—á–∞—Ç—å!")
            return
            
        players = list(game['players'].keys())
        if len(players) < 2:
            bot.reply_to(message, "‚ùå –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 –∏–≥—Ä–æ–∫–∞!")
            return
            
        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π (1 –Ω–∞ 4-5 –∏–≥—Ä–æ–∫–æ–≤)
        imp_count = max(1, len(players) // 4)
        impostors = random.sample(players, imp_count)
        
        # –†–∞–∑–¥–∞—ë–º —Ä–æ–ª–∏
        for player_username in players:
            player_data = game['players'][player_username]
            player_user_id = player_data['user_id']
            
            if player_username in impostors:
                player_data['role'] = 'impostor'
                try:
                    bot.send_message(player_user_id, 
                                   f"üî™ –¢–´ –ü–†–ï–î–ê–¢–ï–õ–¨!\n\n"
                                   f"–¢–≤–æ—è —Ü–µ–ª—å - —É–±–∏—Ç—å –≤—Å–µ—Ö –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π!\n"
                                   f"–ü–æ–¥–æ–π–¥–∏ –±–ª–∏–∑–∫–æ –∫ –∂–µ—Ä—Ç–≤–µ (5 –º–µ—Ç—Ä–æ–≤) –¥–ª—è —É–±–∏–π—Å—Ç–≤–∞\n"
                                   f"üìç –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                                   f"–ù–µ –ø–æ–ø–∞–¥–∏—Å—å!")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—é: {e}")
            else:
                player_data['role'] = 'crewmate'
                try:
                    task = random.choice(game['tasks'])
                    bot.send_message(player_user_id, 
                                   f"üë®‚ÄçüöÄ –¢–´ –ú–ò–†–ù–´–ô –ñ–ò–¢–ï–õ–¨!\n\n"
                                   f"–¢–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task}\n"
                                   f"–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É: /taskdone\n"
                                   f"üìç –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                                   f"–ù–∞–π–¥–∏ –ø—Ä–µ–¥–∞—Ç–µ–ª—è –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–Ω —É–±—å–µ—Ç —Ç–µ–±—è!")
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∏—Ä–Ω–æ–º—É: {e}")
        
        game['state'] = 'playing'
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
        for uid, room in user_rooms.items():
            if room == room_code:
                try:
                    markup = create_main_keyboard()
                    bot.send_message(uid, 
                                   "üöÄ –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨!\n\n"
                                   "üì± –ü—Ä–æ–≤–µ—Ä—å –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - —Ç–∞–º —Ç–≤–æ—è —Ä–æ–ª—å!\n"
                                   "üìç –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫\n"
                                   "üéØ –ú–∏—Ä–Ω—ã–µ: –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è!\n"
                                   "üî™ –ü—Ä–µ–¥–∞—Ç–µ–ª–∏: —É—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –≤—Ä–∞–≥–∏!",
                                   reply_markup=markup)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {uid}: {e}")
        
        bot.reply_to(message, "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ —Ä–æ–ª–∏.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã: {e}")

# –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
@bot.message_handler(commands=['taskdone'])
def complete_task(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_rooms:
            return
            
        room_code = user_rooms[user_id]
        
        if room_code not in games or games[room_code]['state'] != 'playing':
            return
            
        game = games[room_code]
        username = message.from_user.username
        
        if game['players'][username]['role'] != 'crewmate':
            bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!")
            return
            
        if game['tasks']:
            completed_task = game['tasks'].pop(0)
            bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ '{completed_task}' –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
                                f"–û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞–Ω–∏–π: {len(game['tasks'])}")
            
            if not game['tasks']:
                end_game(room_code, "crewmate")
        else:
            bot.reply_to(message, "‚ùå –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
@bot.message_handler(content_types=['location'])
def handle_location(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username
        
        if user_id not in user_rooms:
            return
            
        room_code = user_rooms[user_id]
        
        if room_code not in games or games[room_code]['state'] != 'playing':
            return
            
        game = games[room_code]
        player_data = game['players'][username]
        
        if not player_data['alive']:
            bot.reply_to(message, "üíÄ –¢—ã –º–µ—Ä—Ç–≤ –∏ –Ω–µ –º–æ–∂–µ—à—å –¥–≤–∏–≥–∞—Ç—å—Å—è!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∏–≥—Ä–æ–∫–∞
        lat = message.location.latitude
        lon = message.location.longitude
        player_data['location'] = {'lat': lat, 'lon': lon}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–±–∏–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –∏–≥—Ä–æ–∫ - –ø—Ä–µ–¥–∞—Ç–µ–ª—å)
        if player_data['role'] == 'impostor':
            check_kills(room_code, username, lat, lon)
        
        bot.reply_to(message, "üìç –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ü–∏–∏: {e}")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–±–∏–π—Å—Ç–≤–∞
def check_kills(room_code, killer_username, killer_lat, killer_lon):
    try:
        game = games[room_code]
        
        for victim_username, victim_data in game['players'].items():
            if (victim_username != killer_username and 
                victim_data['alive'] and 
                victim_data['location'] and
                victim_data['role'] == 'crewmate'):
                
                victim_lat = victim_data['location']['lat']
                victim_lon = victim_data['location']['lon']
                
                distance = calculate_distance(killer_lat, killer_lon, victim_lat, victim_lon)
                
                if distance < 5:
                    # –°–æ–≤–µ—Ä—à–∞–µ–º —É–±–∏–π—Å—Ç–≤–æ
                    victim_data['alive'] = False
                    
                    killer_id = game['players'][killer_username]['user_id']
                    victim_id = victim_data['user_id']
                    
                    if killer_id:
                        bot.send_message(killer_id, f"üî™ –¢—ã —É–±–∏–ª @{victim_username}!")
                    if victim_id:
                        bot.send_message(victim_id, f"üíÄ –¢–µ–±—è —É–±–∏–ª –ø—Ä–µ–¥–∞—Ç–µ–ª—å! –¢—ã —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–∑—Ä–∞–∫.")
                    
                    # –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º –æ–± —É–±–∏–π—Å—Ç–≤–µ
                    for uid, room in user_rooms.items():
                        if room == room_code:
                            try:
                                bot.send_message(uid, f"‚ö∞Ô∏è @{victim_username} –±—ã–ª —É–±–∏—Ç! –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!")
                            except:
                                pass
                    
                    start_voting(room_code)
                    break
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–±–∏–π—Å—Ç–≤: {e}")

# –ù–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
def start_voting(room_code):
    try:
        game = games[room_code]
        game['state'] = 'voting'
        game['votes'] = {}
        
        alive_players = [p for p, data in game['players'].items() if data['alive']]
        
        for uid, room in user_rooms.items():
            if room == room_code:
                try:
                    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
                    for player in alive_players:
                        markup.add(types.KeyboardButton(f"üó≥Ô∏è {player}"))
                    
                    bot.send_message(uid, 
                                   "üó≥Ô∏è –ì–û–õ–û–°–û–í–ê–ù–ò–ï!\n\n"
                                   "–ö—Ç–æ –ø–æ-—Ç–≤–æ–µ–º—É –ø—Ä–µ–¥–∞—Ç–µ–ª—å? –í—ã–±–µ—Ä–∏ –∏–≥—Ä–æ–∫–∞:",
                                   reply_markup=markup)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤
@bot.message_handler(func=lambda message: message.text.startswith("üó≥Ô∏è"))
def handle_vote(message):
    try:
        user_id = message.from_user.id
        
        if user_id not in user_rooms:
            return
            
        room_code = user_rooms[user_id]
        
        if room_code not in games or games[room_code]['state'] != 'voting':
            return
            
        game = games[room_code]
        username = message.from_user.username
        
        if not game['players'][username]['alive']:
            bot.reply_to(message, "üíÄ –ú–µ—Ä—Ç–≤—ã–µ –Ω–µ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!")
            return
        
        voted_player = message.text.replace("üó≥Ô∏è ", "").strip()
        if voted_player not in game['players']:
            bot.reply_to(message, "‚ùå –¢–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç!")
            return
        
        # –ó–∞–ø—Ä–µ—â–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
        if voted_player == username:
            bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
            
        game['votes'][username] = voted_player
        bot.reply_to(message, f"‚úÖ –¢—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –ø—Ä–æ—Ç–∏–≤ @{voted_player}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        alive_count = sum(1 for data in game['players'].values() if data['alive'])
        if len(game['votes']) == alive_count:
            finish_voting(room_code)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}")

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
def finish_voting(room_code):
    try:
        game = games[room_code]
        
        vote_count = {}
        for voted_player in game['votes'].values():
            vote_count[voted_player] = vote_count.get(voted_player, 0) + 1
        
        if vote_count:
            ejected_player = max(vote_count.items(), key=lambda x: x[1])[0]
            game['players'][ejected_player]['alive'] = False
            
            # –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            for uid, room in user_rooms.items():
                if room == room_code:
                    try:
                        markup = create_main_keyboard()
                        bot.send_message(uid, f"üö™ –ò–≥—Ä–æ–∫ @{ejected_player} –±—ã–ª –∏–∑–≥–Ω–∞–Ω!",
                                       reply_markup=markup)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
            check_win_conditions(room_code)
        else:
            for uid, room in user_rooms.items():
                if room == room_code:
                    try:
                        markup = create_main_keyboard()
                        bot.send_message(uid, "ü§∑ –ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏–∑–≥–Ω–∞–Ω. –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!",
                                       reply_markup=markup)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")
        
        game['state'] = 'playing'
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–±–µ–¥—ã
def check_win_conditions(room_code):
    try:
        game = games[room_code]
        
        alive_players = [p for p, data in game['players'].items() if data['alive']]
        impostors_alive = [p for p in alive_players if game['players'][p]['role'] == 'impostor']
        crewmates_alive = [p for p in alive_players if game['players'][p]['role'] == 'crewmate']
        
        if not impostors_alive:
            end_game(room_code, "crewmate")
        elif len(impostors_alive) >= len(crewmates_alive):
            end_game(room_code, "impostor")
        elif not game['tasks']:
            end_game(room_code, "crewmate")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã: {e}")

# –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
def end_game(room_code, winner):
    try:
        game = games[room_code]
        game['state'] = 'finished'
        
        winner_text = "–ú–ò–†–ù–´–ï –ñ–ò–¢–ï–õ–ò" if winner == "crewmate" else "–ü–†–ï–î–ê–¢–ï–õ–ò"
        
        for uid, room in user_rooms.items():
            if room == room_code:
                try:
                    result_message = f"üéâ –ò–ì–†–ê –û–ö–û–ù–ß–ï–ù–ê!\nüèÜ –ü–û–ë–ï–î–ò–õ–ò: {winner_text}\n\n"
                    result_message += "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                    
                    for player, data in game['players'].items():
                        status = "‚úÖ –ñ–∏–≤" if data['alive'] else "üíÄ –ú–µ—Ä—Ç–≤"
                        role = "üî™ –ü—Ä–µ–¥–∞—Ç–µ–ª—å" if data['role'] == 'impostor' else "üë®‚ÄçüöÄ –ú–∏—Ä–Ω—ã–π"
                        result_message += f"{status} - @{player} ({role})\n"
                    
                    markup = types.ReplyKeyboardRemove()
                    bot.send_message(uid, result_message, reply_markup=markup)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã: {e}")
        
        # –û—á–∏—â–∞–µ–º –∏–≥—Ä—É
        if room_code in games:
            del games[room_code]
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        users_to_remove = [uid for uid, room in user_rooms.items() if room == room_code]
        for uid in users_to_remove:
            del user_rooms[uid]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

if __name__ == "__main__":
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏!")
    print("üìç –õ–æ–∫–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥")
    print("–ù–∞–π–¥–∏ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞–ø–∏—à–∏ /start")
    
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")